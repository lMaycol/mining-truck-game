<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mining Truck Rock Collection Game</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            font-family: Arial, sans-serif;
        }
        #gameCanvas {
            border: 1px solid black;
        }
        #gameInfo {
            position: absolute;
            top: 10px;
            left: 10px;
            color: white;
            font-size: 20px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    <div id="gameInfo">
        Score: <span id="score">0</span>
        <br>
        Time: <span id="time">60</span>s
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const scoreElement = document.getElementById('score');
        const timeElement = document.getElementById('time');

        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        let score = 0;
        let timeLeft = 60;
        let truckX = canvas.width / 2;
        const truckY = canvas.height - 100;
        const truckWidth = 160;
        const truckHeight = 90;
        const rocks = [];

        // Load SVGs
        const truckSVG = new Image();
        truckSVG.src = 'data:image/svg+xml,' + encodeURIComponent(`
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 200 150">
                <rect x="20" y="60" width="160" height="60" fill="#FFD700"/>
                <rect x="150" y="30" width="40" height="30" fill="#FFD700"/>
                <circle cx="50" cy="120" r="20" fill="#333"/>
                <circle cx="150" cy="120" r="20" fill="#333"/>
                <path d="M20 60 L180 60 L180 120 L20 120 Z" fill="#DAA520" stroke="#000" stroke-width="2"/>
            </svg>
        `);

        const rockSVG = new Image();
        rockSVG.src = 'data:image/svg+xml,' + encodeURIComponent(`
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 200 150">
                <path d="M50 100 L80 70 L120 80 L140 110 L100 130 Z" fill="#808080"/>
                <path d="M30 120 L60 100 L80 110 L70 130 Z" fill="#A9A9A9"/>
                <circle cx="160" cy="120" r="10" fill="#D3D3D3"/>
                <circle cx="180" cy="130" r="8" fill="#C0C0C0"/>
                <circle cx="140" cy="140" r="6" fill="#B8B8B8"/>
            </svg>
        `);

        function createRock() {
            rocks.push({
                x: Math.random() * (canvas.width - 50),
                y: -50,
                width: 50,
                height: 50,
                speed: Math.random() * 2 + 1
            });
        }

        function updateGame() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Draw truck
            ctx.drawImage(truckSVG, truckX - truckWidth / 2, truckY, truckWidth, truckHeight);

            // Update and draw rocks
            for (let i = rocks.length - 1; i >= 0; i--) {
                const rock = rocks[i];
                rock.y += rock.speed;
                ctx.drawImage(rockSVG, rock.x, rock.y, rock.width, rock.height);

                // Check collision
                if (rock.y + rock.height > truckY && 
                    rock.x < truckX + truckWidth / 2 && 
                    rock.x + rock.width > truckX - truckWidth / 2) {
                    rocks.splice(i, 1);
                    score++;
                    scoreElement.textContent = score;
                }

                // Remove rocks that are off-screen
                if (rock.y > canvas.height) {
                    rocks.splice(i, 1);
                }
            }

            // Create new rocks
            if (Math.random() < 0.02) {
                createRock();
            }

            // Update time
            timeLeft = Math.max(0, timeLeft - 1/60);
            timeElement.textContent = Math.ceil(timeLeft);

            if (timeLeft > 0) {
                requestAnimationFrame(updateGame);
            } else {
                alert(`Game Over! Your score: ${score}`);
            }
        }

        // Handle keyboard input
        document.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowLeft') {
                truckX = Math.max(truckWidth / 2, truckX - 10);
            } else if (e.key === 'ArrowRight') {
                truckX = Math.min(canvas.width - truckWidth / 2, truckX + 10);
            }
        });

        // Handle touch input
        let touchStartX = 0;
        canvas.addEventListener('touchstart', (e) => {
            touchStartX = e.touches[0].clientX;
        });

        canvas.addEventListener('touchmove', (e) => {
            e.preventDefault();
            const touchEndX = e.touches[0].clientX;
            const diff = touchEndX - touchStartX;
            truckX = Math.max(truckWidth / 2, Math.min(canvas.width - truckWidth / 2, truckX + diff));
            touchStartX = touchEndX;
        });

        // Start the game
        updateGame();
    </script>
</body>
</html>
